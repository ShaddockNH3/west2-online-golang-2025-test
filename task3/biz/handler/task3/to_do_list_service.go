// Code generated by hertz generator.

package task3

import (
	"context"

	task3 "github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/model/task3"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/mw"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/pack"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/service"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateToDoList .
// @Summary      创建新的待办事项
// @Description  为当前登录用户创建一个新的待办事项
// @Accept       application/json
// @Produce      application/json
// @Param        CreateToDoListRequest body task3.CreateToDoListRequest true "待办事项的标题和内容"
// @Success      200 {object} task3.CreateToDoListResponse "成功"
// @Failure      400 {object} task3.CreateToDoListResponse "参数错误"
// @Failure      500 {object} task3.CreateToDoListResponse "服务器内部错误"
// @Security     ApiKeyAuth
// @Router       /v1/todo_lists [post]
func CreateToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.CreateToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.CreateToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.CreateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.CreateToDoList(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.CreateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.CreateToDoListResponse{Code: task3.Code_Success, Msg: "todo list created successfully"})
}

// UpdateToDoList .
// @Summary      更新指定的待办事项
// @Description  更新某个待办事项的标题、内容或状态
// @Accept       application/json
// @Produce      application/json
// @Param        todo_list_id path int true "待办事项ID"
// @Param        UpdateToDoListRequest body task3.UpdateToDoListRequest true "需要更新的字段"
// @Success      200 {object} task3.UpdateToDoListResponse "成功"
// @Failure      400 {object} task3.UpdateToDoListResponse "参数错误"
// @Failure      500 {object} task3.UpdateToDoListResponse "服务器内部错误"
// @Security     ApiKeyAuth
// @Router       /v1/todo_lists/{todo_list_id} [patch]
func UpdateToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.UpdateToDoListRequest
	err = c.BindAndValidate(&req)

	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.UpdateToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.UpdateToDoList(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.UpdateToDoListResponse{Code: task3.Code_Success, Msg: "todo list update successfully"})
}

// UpdateBatchStatus .
// @Summary      批量更新所有待办事项的状态
// @Description  将当前用户的所有待办事项统一更新为指定的状态 (0: PENDING, 1: COMPLETED)
// @Accept       application/json
// @Produce      application/json
// @Param        UpdateBatchStatusRequest body task3.UpdateBatchStatusRequest true "要更新的目标状态"
// @Success      200 {object} task3.UpdateBatchStatusResponse "成功"
// @Failure      400 {object} task3.UpdateBatchStatusResponse "参数错误"
// @Failure      500 {object} task3.UpdateBatchStatusResponse "服务器内部错误"
// @Security     ApiKeyAuth
// @Router       /v1/todo_lists/status [put]
func UpdateBatchStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.UpdateBatchStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.UpdateBatchStatusResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateBatchStatusResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.UpdateBatchStatus(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateBatchStatusResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.UpdateBatchStatusResponse{Code: task3.Code_Success, Msg: "todo list update successfully"})
}

// QueryBatchToDoList .
// @Summary      查询待办事项列表
// @Description  根据关键词、状态分页查询当前用户的待办事项列表
// @Accept       application/json
// @Produce      application/json
// @Param        keyword query string false "搜索关键词 (在标题或内容中)"
// @Param        status query int false "状态 (0: PENDING, 1: COMPLETED)" Enums(0, 1)
// @Param        page query int true "页码" default(1)
// @Param        page_size query int true "每页数量" default(10)
// @Success      200 {object} task3.QueryBatchToDoListResponse "成功"
// @Failure      400 {object} task3.QueryBatchToDoListResponse "参数错误"
// @Failure      500 {object} task3.QueryBatchToDoListResponse "服务器内部错误"
// @Security     ApiKeyAuth
// @Router       /v1/todo_lists [get]
func QueryBatchToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.QueryBatchToDoListsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.QueryBatchToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.QueryBatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	todo_lists, total, err := ToDoListService.QueryBatchToDoList(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.QueryBatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.QueryBatchToDoListResponse{Code: task3.Code_Success, TodoLists: pack.ToDoLists(todo_lists), Total: total, Msg: "todo list query successfully"})
}

// DeleteToDoList .
// @Summary      删除指定的待办事项
// @Description  删除当前用户拥有的某一个待办事项
// @Accept       application/json
// @Produce      application/json
// @Param        todo_list_id path int true "待办事项ID"
// @Success      200 {object} task3.DeleteToDoListResponse "成功"
// @Failure      400 {object} task3.DeleteToDoListResponse "参数错误"
// @Failure      500 {object} task3.DeleteToDoListResponse "服务器内部错误"
// @Security     ApiKeyAuth
// @Router       /v1/todo_lists/{todo_list_id} [delete]
func DeleteToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeleteToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeleteToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.DeleteToDoList(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeleteToDoListResponse{Code: task3.Code_Success, Msg: "todo list delete successfully"})
}

// DeletePendingToDos .
// @Summary      删除所有未完成的待办事项
// @Description  删除当前用户所有状态为 PENDING 的待办事项
// @Accept       application/json
// @Produce      application/json
// @Success      200 {object} task3.DeletePatchToDoListResponse "成功"
// @Failure      500 {object} task3.DeletePatchToDoListResponse "服务器内部错误"
// @Security     ApiKeyAuth
// @Router       /v1/todo_lists/pending [delete]
func DeletePendingToDos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeletePatchToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeletePatchToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.DeletePatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.DeletePendingToDos(userID)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeletePatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeletePatchToDoListResponse{Code: task3.Code_Success, Msg: "todo list delete successfully"})
}

// DeleteCompletedToDos .
// @Summary      删除所有已完成的待办事项
// @Description  删除当前用户所有状态为 COMPLETED 的待办事项
// @Accept       application/json
// @Produce      application/json
// @Success      200 {object} task3.DeletePatchToDoListResponse "成功"
// @Failure      500 {object} task3.DeletePatchToDoListResponse "服务器内部错误"
// @Security     ApiKeyAuth
// @Router       /v1/todo_lists/completed [delete]
func DeleteCompletedToDos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeletePatchToDoListRequest
	err = c.BindAndValidate(&req)

	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeletePatchToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.DeletePatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.DeleteCompletedToDos(userID)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeletePatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeletePatchToDoListResponse{Code: task3.Code_Success, Msg: "todo list delete successfully"})
}

// DeleteAllToDos .
// @Summary      删除所有待办事项
// @Description  删除当前用户所有的待办事项，无论状态如何
// @Accept       application/json
// @Produce      application/json
// @Success      200 {object} task3.DeletePatchToDoListResponse "成功"
// @Failure      500 {object} task3.DeletePatchToDoListResponse "服务器内部错误"
// @Security     ApiKeyAuth
// @Router       /v1/todo_lists [delete]
func DeleteAllToDos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeletePatchToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeletePatchToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.DeletePatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.DeleteAllToDos(userID)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeletePatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeletePatchToDoListResponse{Code: task3.Code_Success, Msg: "todo list delete successfully"})
}
