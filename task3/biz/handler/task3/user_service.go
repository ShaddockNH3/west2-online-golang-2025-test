// Code generated by hertz generator.

package task3

import (
	"context"

	task3 "github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/model/task3"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/mw"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/pack"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/service"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UpdateUser .
// @router /v1/user/update/:user_id [POST]
func UpdateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.UpdateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.UpdateUserResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateUserResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	userService := service.NewUserService(ctx)
	err = userService.UpdateUser(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateUserResponse{Code: task3.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, task3.UpdateUserResponse{Code: task3.Code_Success})
}

// DeleteUser .
// @router /v1/user/delete/:user_id [POST]
func DeleteUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeleteUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeleteUserResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateUserResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	userService := service.NewUserService(ctx)
	err = userService.DeleteUser(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteUserResponse{Code: task3.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeleteUserResponse{Code: task3.Code_Success})
}

// QueryUser .
// @router /v1/user/query/ [POST]
func QueryUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.QueryUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.QueryUserResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	userService := service.NewUserService(ctx)
	users, total, err := userService.QueryUser(&req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.QueryUserResponse{Code: task3.Code_DBErr, Msg: err.Error()})
	}

	c.JSON(consts.StatusOK, &task3.QueryUserResponse{Code: task3.Code_Success, Users: pack.Users(users), Total: total})
}

// CreateUser .
// @router /v1/user/create/ [POST]
func CreateUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.CreateUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.CreateUserResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	userService := service.NewUserService(ctx)
	err = userService.CreateUser(&req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.CreateUserResponse{Code: task3.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &task3.CreateUserResponse{Code: task3.Code_Success})
}

// Login .
// @router /v1/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(task3.LoginResponse)

	c.JSON(consts.StatusOK, resp)
}
