// Code generated by hertz generator.

package social

import (
	"context"
	"fmt"

	"github.com/ShaddockNH3/west2-online-golang-2025-test/task4/biz/model/common"
	social "github.com/ShaddockNH3/west2-online-golang-2025-test/task4/biz/model/social"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task4/biz/service/social_service"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task4/pkg/constants"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task4/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// ActionRelation .
// @router /v1/relation/action [POST]
func ActionRelation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.ActionRelationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := new(social.ActionRelationResponse)
		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  err.Error(),
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	currentUserID, exists := c.Get(constants.ContextCurrentUserKey)
	if !exists {
		resp := new(social.ActionRelationResponse)
		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  errno.UnableToRetrieveUserInfoErr.ErrMsg,
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	if currentUserID.(string) == req.ToUserID {
		resp := new(social.ActionRelationResponse)
		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  "cannot follow yourself",
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	socialService := social_service.NewSocialService(ctx)
	err = socialService.ActionRelation(currentUserID.(string), &req)

	resp := new(social.ActionRelationResponse)

	if err != nil {
		e := errno.ConvertErr(err)

		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  e.ErrMsg,
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Base = &common.BaseResponse{
		Code: fmt.Sprintf("%d", errno.Success.ErrCode), // 10000
		Msg:  errno.Success.ErrMsg,                     // "success"
	}

	c.JSON(consts.StatusOK, resp)
}

// ListFollowing .
// @router /v1/following/list [GET]
func ListFollowing(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.ListFollowingRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := new(social.SocialResponse)
		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  err.Error(),
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	socialService := social_service.NewSocialService(ctx)
	social_list, err := socialService.GetFollowList(&req)

	resp := new(social.SocialResponse)

	if err != nil {
		e := errno.ConvertErr(err)

		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  e.ErrMsg,
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Base = &common.BaseResponse{
		Code: fmt.Sprintf("%d", errno.Success.ErrCode), // 10000
		Msg:  errno.Success.ErrMsg,                     // "success"
	}
	resp.Data = &common.SocialDataForListResponse{
		Items: social_list,
		Total: int64(len(social_list)),
	}

	c.JSON(consts.StatusOK, resp)
}

// ListFollower .
// @router /v1/follower/list [GET]
func ListFollower(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.ListFollowerRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := new(social.SocialResponse)
		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  err.Error(),
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	socialService := social_service.NewSocialService(ctx)
	social_list, err := socialService.GetFollowerList(&req)

	resp := new(social.SocialResponse)

	if err != nil {
		e := errno.ConvertErr(err)

		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  e.ErrMsg,
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Base = &common.BaseResponse{
		Code: fmt.Sprintf("%d", errno.Success.ErrCode), // 10000
		Msg:  errno.Success.ErrMsg,                     // "success"
	}
	resp.Data = &common.SocialDataForListResponse{
		Items: social_list,
		Total: int64(len(social_list)),
	}

	c.JSON(consts.StatusOK, resp)
}

// ListFriends .
// @router /v1/friends/list [GET]
func ListFriends(ctx context.Context, c *app.RequestContext) {
	var err error
	var req social.ListFriendsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := new(social.SocialResponse)
		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  err.Error(),
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	currentUserID, exists := c.Get(constants.ContextCurrentUserKey)
	if !exists {
		resp := new(social.ActionRelationResponse)
		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  errno.UnableToRetrieveUserInfoErr.ErrMsg,
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	socialService := social_service.NewSocialService(ctx)
	social_list, err := socialService.GetFriendList(currentUserID.(string), &req)

	resp := new(social.SocialResponse)

	if err != nil {
		e := errno.ConvertErr(err)

		resp.Base = &common.BaseResponse{
			Code: "-1",
			Msg:  e.ErrMsg,
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.Base = &common.BaseResponse{
		Code: fmt.Sprintf("%d", errno.Success.ErrCode), // 10000
		Msg:  errno.Success.ErrMsg,                     // "success"
	}
	resp.Data = &common.SocialDataForListResponse{
		Items: social_list,
		Total: int64(len(social_list)),
	}

	c.JSON(consts.StatusOK, resp)
}
