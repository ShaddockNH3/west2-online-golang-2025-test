// Code generated by hertz generator.

package task3

import (
	"context"

	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/dal/mysql"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/model"
	task3 "github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/model/task3"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/mw"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateToDoList .
// @router v1/todo_list/create/ [POST]
func CreateToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.CreateToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.CreateToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.CreateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	newToDo := &model.ToDoList{
		UserID:  userID,
		Title:   req.Title,
		Context: req.Context,
		Status:  int(task3.Status_ToDo),
	}

	if err = mysql.CreateToDoList(newToDo); err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.CreateToDoListResponse{Code: task3.Code_DBErr, Msg: err.Error()})
		return
	}

	c.JSON(consts.StatusOK, &task3.CreateToDoListResponse{Code: task3.Code_Success, Msg: "todo list created successfully"})
}

// UpdateToDoList .
// @router v1/todo_list/update/:todo_list_id [POST]
func UpdateToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.UpdateToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(task3.UpdateToDoListResponse)

	c.JSON(consts.StatusOK, resp)
}

// QueryToDoList .
// @router v1/todo_list/query/ [POST]
func QueryToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.QueryToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(task3.QueryToDoListResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteToDoList .
// @router v1/todo_list/delete/:todo_list_id [POST]
func DeleteToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeleteToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(task3.DeleteToDoListResponse)

	c.JSON(consts.StatusOK, resp)
}
