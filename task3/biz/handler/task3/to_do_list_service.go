// Code generated by hertz generator.

package task3

import (
	"context"

	task3 "github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/model/task3"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/mw"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/pack"
	"github.com/ShaddockNH3/west2-online-golang-2025-test/task3/biz/service"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateToDoList .
// @router v1/todo_list/create/ [POST]
func CreateToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.CreateToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.CreateToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.CreateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.CreateToDoList(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.CreateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.CreateToDoListResponse{Code: task3.Code_Success, Msg: "todo list created successfully"})
}

// UpdateToDoList .
// @router v1/todo_list/update/:todo_list_id [POST]
func UpdateToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.UpdateToDoListRequest
	err = c.BindAndValidate(&req)

	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.UpdateToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.UpdateToDoList(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.UpdateToDoListResponse{Code: task3.Code_Success, Msg: "todo list update successfully"})
}

// UpdateBatchStatus .
// @router /v1/todo_lists/status [PUT]
func UpdateBatchStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.UpdateBatchStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.UpdateBatchStatusResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateBatchStatusResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.UpdateBatchStatus(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.UpdateBatchStatusResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.UpdateBatchStatusResponse{Code: task3.Code_Success, Msg: "todo list update successfully"})
}

// QueryBatchToDoList .
// @router /v1/todo_lists [GET]
func QueryBatchToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.QueryBatchToDoListsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.QueryBatchToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.QueryBatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	todo_lists, total, err := ToDoListService.QueryBatchToDoList(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.QueryBatchToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.QueryBatchToDoListResponse{Code: task3.Code_Success, TodoLists: pack.ToDoLists(todo_lists), Total: total, Msg: "todo list query successfully"})
}

// DeleteToDoList .
// @router v1/todo_list/delete/:todo_list_id [POST]
func DeleteToDoList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeleteToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeleteToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.DeleteToDoList(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeleteToDoListResponse{Code: task3.Code_Success, Msg: "todo list delete successfully"})
}

// DeletePendingToDos .
// @router /v1/todo_lists/pending [DELETE]
func DeletePendingToDos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeleteToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeleteToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.DeletePendingToDos(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeleteToDoListResponse{Code: task3.Code_Success, Msg: "todo list delete successfully"})
}

// DeleteCompletedToDos .
// @router /v1/todo_lists/completed [DELETE]
func DeleteCompletedToDos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeleteToDoListRequest
	err = c.BindAndValidate(&req)

	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeleteToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.DeleteCompletedToDos(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeleteToDoListResponse{Code: task3.Code_Success, Msg: "todo list delete successfully"})
}

// DeleteAllToDos .
// @router /v1/todo_lists [DELETE]
func DeleteAllToDos(ctx context.Context, c *app.RequestContext) {
	var err error
	var req task3.DeleteToDoListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, &task3.DeleteToDoListResponse{Code: task3.Code_ParamInvalid, Msg: err.Error()})
		return
	}

	v, ok := c.Get(mw.UserIDKey)
	if !ok {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	userID := v.(int64)

	ToDoListService := service.NewToDoListService(ctx)
	err = ToDoListService.DeleteAllToDos(userID, &req)

	if err != nil {
		c.JSON(consts.StatusInternalServerError, &task3.DeleteToDoListResponse{Code: task3.Code_DBErr, Msg: "failed to get user id"})
		return
	}

	c.JSON(consts.StatusOK, &task3.DeleteToDoListResponse{Code: task3.Code_Success, Msg: "todo list delete successfully"})
}
